var db = require('./')('fb367903-f308-4b81-9a44-4fbd53533848')
var fs = require('fs')
var readline = require('readline');

var rl = readline.createInterface({
  input : fs.createReadStream('/tmp/bgg.json'),
  output: process.stdout,
  terminal: false
})
var stopAt = 200000;
var pauseAt = 12000;
var resumeAt = 500;

var active = 0;
var paused = false;
var count = 0;

function hasMultipleProps(item){
  var count = 0;
  for(var key in item){
    ++count;
    if(count > 1) {
      return true;
    }
  }
  return false;
}
function isNumeric(num){
    return !isNaN(num)
}
function hoistValues(item) {
  for(var key in item) {
    var child = item[key];
    if(child.hasOwnProperty('value') && !hasMultipleProps(child)) {
      if(isNumeric(child.value)){
        if(child.value.indexOf('.') != -1){
          item[key] = parseFloat(child.value)
        }else{
          item[key] = parseInt(child.value)
        }
      } else {
        item[key] = child.value;
      }
    }
  }
}

function transformEntry(json) {
  var item = JSON.parse(json);
  item.id = parseInt(item.id)
  if(item.link) {
    if(!item.link.length) {
      item.link = [item.link];
    }
    for(var i = 0; i<item.link.length; i++) {
      var link = item.link[i];
      var vals = item[link.type];
      if(!vals){ 
        vals = [];
        item[link.type] = vals;
      }
      vals.push(link.value)
    } 
  }
  if(item.name) {
    if(!item.name.length) {
      item.name = [item.name];
    }
    var primaryName = "unknown";
    var alternateNames = [];
    for(var i=0;i<item.name.length;i++){
      var name = item.name[i];
      if(name.type=='primary') {
        primaryName = name.value;
      } else {
        alternateNames.push(name.value);
      }
    }
    item.name = primaryName;
    item.alternateNames = alternateNames;
  }
  hoistValues(item);
  hoistValues(item.statistics.ratings);
  item.bggRating = item.statistics.ratings.average;
  return item;
}
rl.on('line',function(line){
  ++count;
  ++active;
  if(count >= stopAt) {
    console.log('thats enough for now...');
    rl.pause();
    rl.close();
    return;
  }
  if(active >= pauseAt && !paused) {
    paused = true
    console.log('pausing...')
    rl.pause()
  }
  var item = transformEntry(line);
  console.log('putting', item.type, item.id)
  db.put(item.type, ''+item.id, item)
  .then(function(result){
    console.log('SUCCESS for '+item.type+"/"+item.id, result.headers['location']);
    --active;
    if(paused && active <= resumeAt) {
      console.log('resuming')
      paused = false;
      rl.resume()
    }
  })
  .fail(function(err){
    --active;
    console.log('failed...', err);
    if(paused && active <= resumeAt) {
      console.log('resuming')
      paused = false;
      rl.resume()
    }
  })  
})

